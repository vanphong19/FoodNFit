package com.vanphong.foodnfit.activity

import android.app.NotificationManager
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.Color
import android.graphics.drawable.ColorDrawable
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.provider.Settings
import android.view.Gravity
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.Window
import android.view.WindowManager
import android.widget.Button
import android.widget.RadioButton
import android.widget.Switch
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import com.google.android.material.materialswitch.MaterialSwitch
import com.google.android.material.radiobutton.MaterialRadioButton
import com.vanphong.foodnfit.BaseActivity
import com.vanphong.foodnfit.MainActivity
import com.vanphong.foodnfit.R
import com.vanphong.foodnfit.databinding.ActivitySettingBinding
import com.vanphong.foodnfit.repository.StepsTrackingRepository
import com.vanphong.foodnfit.util.LanguagePreferenceHelper
import com.vanphong.foodnfit.util.NotificationUtils
import com.vanphong.foodnfit.util.StepsPermissionHelper
import com.vanphong.foodnfit.util.StepsTrackingManager

class SettingActivity : BaseActivity() {
    private var _binding: ActivitySettingBinding? = null
    private val NOTIFICATION_PERMISSION_REQUEST_CODE = 1001
    private lateinit var stepsTrackingManager: StepsTrackingManager
    private lateinit var permissionHelper: StepsPermissionHelper
    private lateinit var switchStepsTracking: MaterialSwitch
    private val binding get() = _binding!!
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        _binding = ActivitySettingBinding.inflate(layoutInflater)
        setContentView(binding.root)

        val currentLang = LanguagePreferenceHelper.getLanguage(this)

        binding.textviewSubLanguage.text = when (currentLang) {
            "vi" -> getString(R.string.vietnamese)
            "en" -> getString(R.string.english)
            else -> getString(R.string.english) // fallback
        }

        binding.layoutChangePassword.setOnClickListener {
            val intent = Intent(this, ChangePasswordActivity::class.java)
            startActivity(intent)
        }

        checkNotificationPermission()

        setupNotificationSwitch()
        switchStepsTracking = binding.switchStepPermission // ƒê·∫£m b·∫£o ID n√†y c√≥ trong file layout c·ªßa b·∫°n
        stepsTrackingManager = StepsTrackingManager(this, StepsTrackingRepository())
        setupPermissionHelper()
        setupStepsTrackingSwitchListener()
    }
    private fun setupNotificationSwitch() {
        binding.switchNotification.setOnCheckedChangeListener{_, isChecked ->
            if(isChecked){
                if(ContextCompat.checkSelfPermission(this, android.Manifest.permission.POST_NOTIFICATIONS) != PackageManager.PERMISSION_GRANTED){
                    requestNotificationPermission()
                }
                else{
                    showNotification()
                }
            }
            else{
                showConfirmationDialog()
            }
        }
    }
    private fun showLanguageDialog() {
        val dialogView = LayoutInflater.from(this).inflate(R.layout.layout_language_dialog, null)
        val dialog = AlertDialog.Builder(this)
            .setView(dialogView)
            .create()
        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)

        val window = dialog.window ?: return
        window.setLayout(WindowManager.LayoutParams.MATCH_PARENT, WindowManager.LayoutParams.WRAP_CONTENT)
        window.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))
        window.attributes.gravity = Gravity.CENTER

        val btnVietNam = dialogView.findViewById<MaterialRadioButton>(R.id.btn_vietnam)
        val btnEnglish = dialogView.findViewById<MaterialRadioButton>(R.id.btn_english)

        val currentLang = LanguagePreferenceHelper.getLanguage(this)

        // Check RadioButton t∆∞∆°ng ·ª©ng
        when (currentLang) {
            "vi" -> {
                btnVietNam.isChecked = true
            }
            "en" -> {
                btnEnglish.isChecked = true
            }
        }

        btnVietNam.setOnClickListener {
            if (currentLang != "vi") {
                LanguagePreferenceHelper.setLanguage(this, "vi")
                restartApp() // ho·∫∑c restartApp()
            }
            dialog.dismiss()
        }

        btnEnglish.setOnClickListener {
            if (currentLang != "en") {
                LanguagePreferenceHelper.setLanguage(this, "en")
                restartApp()
            }
            dialog.dismiss()
        }

        dialog.setCancelable(true)
        dialog.show()
    }


    fun onLayoutLanguageClick(view: View) {
        showLanguageDialog()
    }

    private fun restartApp() {
        val intent = Intent(this, MainActivity::class.java)
        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
        startActivity(intent)
        finish()
    }




    private fun checkNotificationPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            binding.switchNotification.isChecked = ContextCompat.checkSelfPermission(
                this,
                android.Manifest.permission.POST_NOTIFICATIONS
            ) == PackageManager.PERMISSION_GRANTED
        }
    }

    private fun requestNotificationPermission() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            ActivityCompat.requestPermissions(
                this,
                arrayOf(android.Manifest.permission.POST_NOTIFICATIONS),
                NOTIFICATION_PERMISSION_REQUEST_CODE
            )
        }
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == NOTIFICATION_PERMISSION_REQUEST_CODE) {
            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                showNotification()
            } else {
                Toast.makeText(this, getString(R.string.permission_deny), Toast.LENGTH_SHORT).show()
                binding.switchNotification.isChecked = false
                showPermissionDeniedDialog()
            }
        }
//        else if (requestCode == PERMISSION_REQUEST_CODE) { // üÜï quy·ªÅn b∆∞·ªõc ch√¢n
//            val granted = grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED
//            binding.switchStepPermission.setOnCheckedChangeListener(null)
//            binding.switchStepPermission.isChecked = granted
//
//            if (granted) {
//                Toast.makeText(this, getString(R.string.step_permission_granted), Toast.LENGTH_SHORT).show()
//            } else {
//                showStepPermissionDeniedDialog()
//            }
//            setupStepPermissionSwitch()
//        }
    }
    private fun cancelNotification() {
        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.cancelAll()
    }

    private fun showNotification(){
        NotificationUtils.showNotification(this, "Reminder", "B·∫°n c√≥ 1 nh·∫Øc nh·ªü m·ªõi")
    }

    private fun openAppSettings() {
        val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)
        val uri = Uri.fromParts("package", packageName, null)
        intent.data = uri
        startActivity(intent)
    }

    private fun showPermissionDeniedDialog() {
        val dialog = AlertDialog.Builder(this)
            .setTitle(getString(R.string.permission_denied_title))  // L·∫•y ti√™u ƒë·ªÅ t·ª´ strings.xml
            .setMessage(getString(R.string.permission_denied_message))  // L·∫•y th√¥ng b√°o t·ª´ strings.xml
            .setPositiveButton(getString(R.string.open_settings_button)) { _, _ ->
                openAppSettings()  // M·ªü C√†i ƒë·∫∑t ·ª©ng d·ª•ng khi ng∆∞·ªùi d√πng nh·∫•n ƒë·ªìng √Ω
            }
            .setNegativeButton(getString(R.string.cancel_button)) { dialog, _ ->
                dialog.dismiss()  // ƒê√≥ng dialog khi ng∆∞·ªùi d√πng nh·∫•n h·ªßy
            }
            .create()

        dialog.show()  // Hi·ªÉn th·ªã dialog
    }

    private fun showConfirmationDialog() {
        val dialog = AlertDialog.Builder(this)
            .setTitle(getString(R.string.confirm_disable_title))  // L·∫•y ti√™u ƒë·ªÅ t·ª´ strings.xml
            .setMessage(getString(R.string.confirm_disable_message))  // L·∫•y th√¥ng b√°o t·ª´ strings.xml
            .setPositiveButton(getString(R.string.open_settings_button)) { _, _ ->
                // N·∫øu ch·ªçn OK, m·ªü C√†i ƒë·∫∑t ·ª©ng d·ª•ng ƒë·ªÉ t·∫Øt quy·ªÅn th√¥ng b√°o
                openAppSettings()
            }
            .setNegativeButton(getString(R.string.cancel_button)) { dialog, _ ->
                // N·∫øu ch·ªçn Cancel, kh√¥ng l√†m g√¨, gi·ªØ switch ·ªü tr·∫°ng th√°i ON
                binding.switchNotification.isChecked = true  // Gi·ªØ switch b·∫≠t
                dialog.dismiss()  // ƒê√≥ng dialog
            }
            .create()

        dialog.show()  // Hi·ªÉn th·ªã dialog
    }

    private fun setupPermissionHelper() {
        permissionHelper = StepsPermissionHelper(
            activity = this,
            onPermissionsGranted = {
                // Khi ng∆∞·ªùi d√πng c·∫•p quy·ªÅn th√†nh c√¥ng, ti·∫øn h√†nh b·∫≠t tracking
                enableStepsTracking()
            },
            onPermissionsDenied = {
                // N·∫øu ng∆∞·ªùi d√πng t·ª´ ch·ªëi, ƒë·∫£m b·∫£o switch ·ªü tr·∫°ng th√°i T·∫ÆT
                Toast.makeText(this, "Quy·ªÅn b·ªã t·ª´ ch·ªëi. Kh√¥ng th·ªÉ b·∫≠t theo d√µi.", Toast.LENGTH_SHORT).show()
                // C·∫≠p nh·∫≠t l·∫°i UI, switch s·∫Ω t·ª± ƒë·ªông t·∫Øt
                updateSwitchState()
            }
        )
    }

    /**
     * G√°n listener cho switch theo d√µi b∆∞·ªõc ch√¢n.
     * Logic n√†y ch·ªâ ƒë∆∞·ª£c k√≠ch ho·∫°t b·ªüi h√†nh ƒë·ªông c·ªßa ng∆∞·ªùi d√πng (g·∫°t switch).
     */
    private fun setupStepsTrackingSwitchListener() {
        switchStepsTracking.setOnCheckedChangeListener { _, isChecked ->
            if (isChecked) {
                // Ng∆∞·ªùi d√πng mu·ªën B·∫¨T
                if (stepsTrackingManager.hasAllPermissions()) {
                    enableStepsTracking()
                } else {
                    // N·∫øu ch∆∞a c√≥ quy·ªÅn, b·∫Øt ƒë·∫ßu quy tr√¨nh xin quy·ªÅn
                    permissionHelper.checkAndRequestPermissions()
                }
            } else {
                // Ng∆∞·ªùi d√πng mu·ªën T·∫ÆT
                disableStepsTracking()
            }
        }
    }

    /**
     * H√†m n√†y l√† ngu·ªìn ch√¢n l√Ω duy nh·∫•t cho tr·∫°ng th√°i c·ªßa switch b∆∞·ªõc ch√¢n.
     * N√≥ ki·ªÉm tra c·∫£ quy·ªÅn v√† tr·∫°ng th√°i l∆∞u trong SharedPreferences.
     */
    private fun updateSwitchState() {
        // ƒêi·ªÅu ki·ªán ƒë·ªÉ switch ƒë∆∞·ª£c B·∫¨T:
        // 1. App ph·∫£i c√≥ T·∫§T C·∫¢ quy·ªÅn.
        // 2. T√≠nh nƒÉng tracking ph·∫£i ƒëang ƒë∆∞·ª£c b·∫≠t trong SharedPreferences.
        val shouldBeOn = stepsTrackingManager.hasAllPermissions() && stepsTrackingManager.isTrackingEnabled()

        // T·∫°m th·ªùi g·ª° listener ƒë·ªÉ tr√°nh k√≠ch ho·∫°t s·ª± ki·ªán m·ªôt c√°ch kh√¥ng c·∫ßn thi·∫øt khi code t·ª± ƒë·ªïi tr·∫°ng th√°i
        switchStepsTracking.setOnCheckedChangeListener(null)
        switchStepsTracking.isChecked = shouldBeOn
        // G·∫Øn l·∫°i listener ƒë·ªÉ nh·∫≠n c√°c h√†nh ƒë·ªông ti·∫øp theo c·ªßa ng∆∞·ªùi d√πng
        setupStepsTrackingSwitchListener()
    }

    private fun enableStepsTracking() {
        // H√†m n√†y ƒë∆∞·ª£c g·ªçi KHI ng∆∞·ªùi d√πng ƒë√£ c·∫•p ƒë·ªß quy·ªÅn V√Ä mu·ªën b·∫≠t
        if (stepsTrackingManager.startStepsTracking()) {
            Toast.makeText(this, "ƒê√£ b·∫≠t theo d√µi b∆∞·ªõc ch√¢n.", Toast.LENGTH_SHORT).show()
        } else {
            // Tr∆∞·ªùng h·ª£p hi·∫øm g·∫∑p, v√≠ d·ª• quy·ªÅn b·ªã thu h·ªìi ngay l·∫≠p t·ª©c
            Toast.makeText(this, "Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu theo d√µi.", Toast.LENGTH_SHORT).show()
        }
        // C·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i UI sau khi th·ª±c hi·ªán h√†nh ƒë·ªông
        updateSwitchState()
    }

    private fun disableStepsTracking() {
        stepsTrackingManager.stopStepsTracking()
        Toast.makeText(this, "ƒê√£ t·∫Øt theo d√µi b∆∞·ªõc ch√¢n.", Toast.LENGTH_SHORT).show()
        // C·∫≠p nh·∫≠t l·∫°i tr·∫°ng th√°i UI sau khi th·ª±c hi·ªán h√†nh ƒë·ªông
        updateSwitchState()
    }
    private fun updateAllSwitchStates() {
        // C·∫≠p nh·∫≠t t·∫•t c·∫£ c√°c switch trong m√†n h√¨nh
        updateSwitchState()
        checkNotificationPermission()
    }
    override fun onResume() {
        super.onResume()
        updateAllSwitchStates()
    }
}